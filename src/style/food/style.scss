@media screen and (min-width: 320px) {
  .animation-food-wrapper {
    // overflow: hidden;
    margin-bottom: 40px;
    .animation-food-inner {
      margin-top: 0px;
      z-index: 8;
      position: relative;
      .upper-box {
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-direction: column;
        gap: 40px;
        max-width: 1140px;
        width: 100%;
        margin: 0 auto;
        margin-bottom: 40px;

        h2 {
          font-size: 40px;
          font-weight: 700;
          color: #ebdfd4;
          max-width: 800px;
          width: 100%;
          line-height: 1em;
          text-align: center;
        }

        figure {
          margin: 0;
          /* Apply slower animation for clockwise and counterclockwise rotation */
          animation: rotateClockwise 60s ease-in-out infinite,
            rotateCounterClockwise 70s ease-in-out infinite alternate;

          img {
            width: 260px;
            height: auto;
          }
        }
      }

      .lower-box {
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-direction: column;
        max-height: unset;
        overflow: hidden;
        gap: 40px;

        /* First Image: Clockwise then Counterclockwise rotation */
        .first-img {
          display: flex;
          align-items: center;
          flex-direction: column;
          gap: 40px;
          gap: 40px;
          figure {
            img {
              width: 260px;
              height: auto;
              animation: rotateClockwise 60s ease-in-out infinite,
                rotateCounterClockwise 70s ease-in-out infinite alternate;
            }
            &:nth-child(even) {
              margin-left: 0px;
              z-index: -1;
            }
            &:nth-child(2){
              img{
                width: 247px;
                height: auto;
              }
            }
          }
        }

        /* Second Image: Clockwise then Counterclockwise rotation */
        .second-img {
          flex-direction: column;
          gap: 40px;
          margin-bottom: 40px;
          figure {
            img {
              width: 260px;
              height: auto;
              animation: rotateClockwise 60s ease-in-out infinite,
                rotateCounterClockwise 70s ease-in-out infinite alternate;
            }
          }
        }

        /* Third Image: Clockwise then Counterclockwise rotation */
        .third-img {
          display: flex;
          align-self: flex-start;
          flex-direction: column;
          gap: 40px;
          figure {
            img {
              width: 260px;
              height: auto;
              animation: rotateClockwise 60s ease-in-out infinite,
                rotateCounterClockwise 70s ease-in-out infinite alternate;
            }
          }
        }
      }
    }
  }
}

@media screen and (min-width: 767px) {
  .animation-food-wrapper {
    margin-bottom: 0px;
    .animation-food-inner {
      margin-top: -180px;
      .upper-box {
        flex-direction: row;
        gap: 0px;
        margin-bottom: 0px;
        h2 {
          font-size: 100px;
          text-align: left;
        }

        figure {
          img {
            width: 350px;
            height: auto;
          }
        }
      }

      .lower-box {
        flex-direction: row;
        max-height: 511px;
        gap: 0px;
        .first-img {
          flex-direction: row;
          gap: 0px;
          figure {
            img {
              width: 100%;
              height: auto;
            }
            &:nth-child(even) {
              margin-left: -120px;
              z-index: -1;
            }
          }
        }
        .second-img {
          margin-bottom: 0px;
        }
      }
    }
  }
  .animation-food-wrapper .animation-food-inner .lower-box .first-img figure:nth-child(2) img{
    width: 340px;
  }
}

figure,
h1,
h2,
p {
  margin: 0;
}
@keyframes rotateClockwise {
  0% {
    transform: rotate(0deg);
  }
  50% {
    transform: rotate(360deg); /* Rotate clockwise 360 degrees */
  }
  100% {
    transform: rotate(0deg); /* Return to initial position */
  }
}

@keyframes rotateCounterClockwise {
  0% {
    transform: rotate(0deg);
  }
  50% {
    transform: rotate(-360deg); /* Rotate counterclockwise 360 degrees */
  }
  100% {
    transform: rotate(0deg); /* Return to initial position */
  }
}
